lane :release do |options|
  # Checking bump type
  bump_type = resolve_bump_type(options)

  # Checking that everything is alright
  check
  podspec_names = Dir.glob('*.podspec', base: '..')
  # Bumping podspec version
  for podspec_name in podspec_names
    version = version_bump_podspec(path: podspec_name, bump_type: bump_type)
  end

  add_files = extend_bump_version(version: version)

  text = read_changelog
  changelog = File.open('new_changes.txt', "w")
  changelog.puts(text)
  changelog.close

  version_file = File.open('version.txt', "w")
  version_file.puts(version)
  version_file.close

  # Stamping changelog
  stamp_changelog(section_identifier: version)

  # Creating release commit and tag
  git_commit(path: ["CHANGELOG.md"] + podspec_names + add_files, message: "Release #{version}", skip_git_hooks: true)
  add_git_tag(tag: version)

  # Pushing to remote repo
  push_to_git_remote(tags: true)

  # Pushing podspec to Cocoapods repo
  for podspec_name in podspec_names
    push_podspec(podspec_name)
  end
end

lane :extend_bump_version do |options|
  []
end

lane :check do
    # Linting ruby files
    lint_fastfile

    # Linting podspec
    podspec_names = Dir.glob('*.podspec', base: '..').map { |f| File.basename(f, '.*') }
    include_podspecs = "{#{podspec_names.join(',')}}.podspec"
    pod_lib_lint(allow_warnings: true, include_podspecs: include_podspecs)

    # Buidling Swift package
    if(File.exist?('Package.swift'))
        build_swift_package
    end
end

lane :build_swift_package do
  project_name = ENV['XCODEPROJ_PATH']
  scheme_name = ENV['SCHEME_NAME']
  config_file_name = "Config.xcconfig"

  # Creating configuration file
  sh("echo SWIFT_ACTIVE_COMPILATION_CONDITIONS=''> #{config_file_name}")

  # Generating xcode project
  sh("swift package generate-xcodeproj --xcconfig-overrides #{config_file_name}")

  # Building generated xcode project
  sh("xcodebuild clean build -project ../#{project_name} -sdk iphoneos -scheme '#{scheme_name}'")

  # Cleaning up
  sh("rm -f #{config_file_name}")
  sh("rm -rf ../#{project_name}")
end

lane :lint_fastfile do
  Dir.chdir("..") do
    error_callback = lambda do |result|
      UI.user_error!("rubocop execution failed: #{result}")
    end

    if(File.exist?('.rubocop.yml'))
        sh('bundle exec rubocop -c .rubocop.yml', error_callback: error_callback)
    end
  end
end

def push_podspec(podspec_name)
  tries = 6
  for i in 1..tries
    begin
         pod_push(
            path: podspec_name,
            allow_warnings: true,
            skip_tests: true
         )
        break
    rescue StandardError => error
        if i == tries
            raise
        end
        delay = 3**i
        puts "retry pod_push after #{delay}"
        sleep(delay)
    end
  end
end

def resolve_bump_type(options)
  valid_bump_types = ['patch', 'minor', 'major']
  bump_type = valid_bump_types.include?(options[:type]) ? options[:type] : nil

  UI.abort_with_message!("Bump type is not specified or incorrect! You can use `type: #{valid_bump_types.join('/')}` to specify it.") unless bump_type

  return bump_type
end
